						GOLANG TUTORIAL FOR BEGINNERS

Source: https://www.youtube.com/watch?v=yyUHQIec83I

Repo GitLab: https://gitlab.com/nanuchi/go-full-course-youtube

Go fue creado por Google en 2007 y liberado como open-source en 2009.Asi que es un lenguaje muy joven.
Al ser tan joven permite utilizar mejor los procesadores multicore actuales,además del paralelismo,las infraestructuras actuales de Clouds,etc.
La mayoría de los anteriores lenguajes no consiguen hacer esto,y simplemente ejecutan aplicaciones secuencialmente.
Go permite ejecutar esas aplicaciones en paralelo.Todo esto lo podemos apreciar en Youtube o GoogleDocs,donde varios usuarios pueden editar el mismo documento.
Una aplicación de reserva de hoteles es otro ejemplo.

Al final siempre estamos hablando de concurrencia(hacer varias cosas al mismo tiempo).Con Go se evitan problemas de Concurrencia.

NOTA: Son concurrentes Java,Go,C++
No son concurrentes: Python,Node

GO fue diseñado para ejecutarse en múltiples cores y construido para soportar concurrencia.
La concurrencia en Go es barata y fácil(supongo que no lo es en Java y C++)

				CARACTERISTICAS PRINCIPALES DE GO

Cuando Google creó Go intentó combinar:
1- La sintaxis simple y legible de un lenguaje de alto nivel de tipado dinámico como Python
2- La eficiencia y seguridad de un lenguaje de bajo nivel ,estáticamente tipado como C++
Go es un lenguaje de Backend.Se usa en microservicios,aplicaciones web,servicios de Database.
Muchas tecnologias que corren en entornos Cloud actuales están escritas en Go,como Docker,HashiCorpVault,Kubernetes,CockroachDb,...
Go necesita menos recursos de CPU y RAM,es más eficiente.
Es un lenguaje compilado,que compila a un único binario(código máquina).Por ello es consistente entre diferentes Sistemas Operativos,ya que todos ejecutarán binario.
					INSTALAR GO Y SINTAXIX BÁSICA

Para ejecutar Go necesitaré instalar el compilador Go(actualmente viene con una Go-CLI) y usar un IDE.Usaremos VSCode.

Para instalar en Ubuntu:
> sudo apt install golang

go version <- confirmar la instalación

Debo instalar en VSCode la extensión Go(la que tiene 6M downloads.Creo un file main.go y acepto todas las instalaciones posteriores.

Para empezar hay que crear un módulo con go mod init <module path>.Ese path puede ser un repo.Mod viene de module:
go mod init booking- 
Esto creará el archivo go.mod(parece como el package.json)

Aun tendré el error expected 'package',found Print.En Go todo el código debe pertenecer a un paquete.Para declarar un paquete se usa package <name> en la primera linea.El paquete donde va el main.go se llama main:

package main

Print("Hello World")

Bien,ahora veré otro error 'expected declaration,found Print'.Básicamente Go necesita un entryPoint,hay que declararlo.Un entryPoint es una función main que Go ejecutará la primero.Debe llamarse main:

func main(){
  Print("Hello World")
} <- con 'func' declaro una función

Y ahora veré que la función Print la tengo que importar también:
package main

import "fmt"

func main() {
	fmt.Print("Hello World")
}
Fmt viene de 'formatter'

Para poder ver todo esto tendré que usar su documentación.Esta aquí:
https://pkg.go.dev/std

Para ejecutar una aplicación con Go es muy sencillo,hay que usar 'go run <file name>'.Esto compilará y ejecutará también el código.

					VARIABLES Y CONSTANTES EN GO

Todo programa tiene el concepto de variables implementado,en aras de no repetir código.Son como contenedores para un valor.
Para usar variables en Go se usa la sintaxis: var <varname> = value.El intérprete inferirá el tipo al compilar:
  var first_name = "Alexander"

Recuerda que el nombre de una variable debe ser descriptivo de lo que almacena.
IMPORTANTE:a diferencia de la mayoría de lenguajes Go compila con errores si declaro una variable y no la uso.Esto lo hace para forzar escribir código de mayor calidad(en resumen,tengo que usar ese first_name en algun punto).

NOTA:lo mismo sucede si importo un paquete y no lo uso,en otros lenguajes es un warning,en Go es un error.

En cuanto a constantes se usará la keyword 'const'.No se podrá cambiar el valor de la constante durante la ejecución del programa.
Puedo usar estas variables o constantes como un argumento adicional del método fmt.Println():
	var conferenceName = "Go Conference"
	const conferenceTickets = 50
	var remainingTickets = conferenceTickets

	fmt.Println("Welcome to our "+ conferenceName +" booking application")
	fmt.Println("We have total of", conferenceTickets, "tickets available and", remainingTickets, "are still available.")

				PRINTING FORMATTED DATA

Otra opción es usar el método fmt.Printf("Some text with variable %s",variable).Inferirá en esa posición(%s) la variable.Hace más fácil la insercción de los valores de las variables en el texto:

fmt.Printf("Welcome to our %v booking application\n",conferenceName) 
Fijate que al usar Printf hay que insertar los saltos de línea manualmente
El %v se llama placeholder y según el carácter que use dirá a Go que tipo de formato utilizar.Acepta solo ciertos valores para el carácter:

%v es el formato por default,formatea por defecto	
%T Go-syntax representation of the type<- me dirá el tipo y no el valor
etc...

NOTA:todo esto lo puedo ver en la documentación,buscando por el paquete fmt

					DATA TYPES IN GO

En Go todo tiene que tener data types.En cualquier lenguaje hay múltiples tipos de datos,Go no es diferente.Sin embargo cada lenguaje suele variar un poco en cuanto a sus tipos de datos.

En Go tengo los siguientes tipos de datos:
Strings:  cualquier cadena de caracteres,usando double quotes("Casa")
Integers : representa cualquier entero,positivo o negativo(14,-3)

Estos son los más basicos.Fijate que necesitaré dobles comillas para definir un string.Bien,¿y por qué todo esto?.Porque en Go no puedo hacer esto(inicializar la variable en otra linea:

var userName
userName = "Tom"

Go no sabrá de que tipo es userName.Esto en otros lenguajes se permite,pero Go no dejará iniciar una variable sin decirle el tipo.O bien lo infiere implicitamente al darle un valor en la misma linea(var username = "Tom") o tengo que darle el tipo al estilo de Typescript:

var username string
username="Tom"

NOTA:el punto y coma es opcional en Go,pero,como siempre queda más claro el código al usarlo.

	var userName string;
	var userTickets int;
	/* ask user for their name */
	userName = "Tom"
	userTickets =2;
	fmt.Printf("User %v has booked %v tickets\n",userName,userTickets);

Fijate que los tipos son string y int y no String y Integer.Puedo observar ya que Go me informa de muchos errores en tiempo de ejecución,en el IDE,en vez de esperar a que compile.

/* %T me dirá el data type de una variable/constante */
fmt.Printf("conferenceTickets type is %T while conferenceName's data type is %T\n", conferenceTickets, conferenceName);

IMPORTANTE: Igual que en Typescript Go sacará el tipo implicitamente si asigno un valor a la variables en la misma linea.Sin embargo,puedo darle el tipo perfectamente,aunque lo fuera a sacar él.
Esto puede ser útil cuando realmente quiero otro tipo,ya que mi tipado explícito prevalecerá sobre el suyo implícito:

var conferenceName string = "Go Conference"; <- Go ya sabe que es un string
const conferenceTickets int64 = 50;
	var remainingTickets = conferenceTickets;

NOTA: el Go,igual que en C# tengo varios tipos de Integer:
uint8:unsigned integer de 8 bytes(0 to 255)
uint16: unsigned integer of 16 bytes(0 to 65535)
uint32: unsigned integer of 32 bytes=(0 to 42944967295)
uint64: unsigned 64 bytes integer= (0 a un webo)
int8: signed 8 bit integer(-128 a +127)
int16: signed 16 bytes integer(-32768 a 32767)
int32: signed 32 bytes(- varios millones a +varios millones)
int64: lo mismo

IMPORTANTE:int8 es el byte de java,int16 es el short,int32 es el int y int64 es el long de java.

En cuanto a decimales en Go hay:
float32: floating-decimal de 32 bits
float64: floating decimal de 64 bits
complex64: número complejo con float32 con parte real e imaginaria
complex128:numbero complejo con float64 con parte real e imaginaria

Todo esto que puede parecer confuso en realidad viene muy bien ya que si quiero que un numero sea siempre positivo y pequeño puedo usar un int8 o int16 y gastar menos memoria.Fijate como lo tipa Go esa constante conferenceTickets:

const conferenceTickets untyped int = 50

Como desarrollador debería ser más preciso si me lo permite el lenguaje y lo necesito:
	var conferenceName = "Go Conference";
	const conferenceTickets uint8 = 50;
	var remainingTickets uint8 = conferenceTickets;

Adicionalmente,en Go hay una "Syntactic Sugar" para definir variables(Syntactic Sugar =  una caracteristica que me deja realizar algo de una forma más sencilla).
conferenceName := "Go Conference" <- no usar <var> y usar ':=' en vez de '='

NOTA:sólo vale para variables,no vale para constantes(esto es lógico ya que no sabe si es una variable o constante,siempre creará variables).
Tampoco se puede cambiar el tipo,hay que usar el que infiera Go implicitamente.

					 MINUTO 45 GETTING USER INPUT

Para leer la entrada por teclado de un usuario usaré el mismo paquete 'fmt'.El paquete 'fmt' tiene diferentes funciones tanto para salida(ya lo hemos visto con Printf,Println) como para entrada.
También maneja la escritura a un archivo de esos datos.

Para recoger la entrada se usa el método Scan(varName),donde varName es una variable ya existente donde se almacenará el valor:
fmt.Scan(&userName).
IMPORTANTE: además tendré que usar un 'pointer'(es el símbolo &)Un pointer es una variable que apunta a la dirección en memoria de otra variable.En Go también se les llama variables especiales.

Asi pues si imprimiera fmt.Println(userName) veré su valor pero con fmt.Println(&userName) apunto a la dirección:
0xc00007a200
Si uso fmt.Scan(&userName) ya si puedo recoger la entrada del usuario.
Los apuntadores también existen en C y C++.
Al tener la función un apuntador a su dirección en memoria puede reasignarle un valor.Con todo esto en cuenta podemos ya hacer un pequeño programa de consola:
	var firstName string;
	var lastname string;
	var email string;
	var userTickets int;

	/* ask user for their name */
	fmt.Println("Enter your first name:");
	fmt.Scan(&firstName);
	
	fmt.Println("Enter your last name:");
	fmt.Scan(&lastname);
	
	fmt.Println("Enter your email:");
	fmt.Scan(&email);

	fmt.Println("Enter the number of tickets you want:");
	fmt.Scan(&userTickets);
	
	fmt.Printf("Thank you %v %v for booking %v tickets.\nYou will receive a confirmation email shortly at %v.\n",firstName,lastname,userTickets,email);

Bien,ahora habría que actualizar los tickets.Sin embargo,veré que no puedo restar un int con un uint8:

remainingTickets = remainingTickets - userTickets;
invalid operation: mismatched types uint8 and int

Una solución sería declarar los dos como unsigned de 8 bytes,otra es convertir-parsear con los métodos necesarios:
remainingTickets = remainingTickets - uint8(userTickets); <- si tengo que castearlo también podria declararlo

						ARRAYS & SLICES IN GO

En Go tenemos dos tipos de datos para almacenar grupos de variables,los arrays y los slices.
IMPORTANTE: los arrays en Go tienen un tamaño fijo.Hay que definir uno al crear el arreglo.La sintaxis para definir un array es:

/*  var array_name = [size]type{optional initial values}*/
var bookings = [5]string{"Nana","Nicole"};

Aunque normalmente no se suelen saber los valores que tendrá un array.
var array_name =[size]array_type {}
NOTA: En Go un array sólo puede tener un mismo tipo de elementos

Y también puedo resumir un poco su inicialización a (var array_name [size]type):
var bookings [50]string; <- lo mismo pero sin el = ni el {}
Si no voy a inicializarlo con valores mejor usar esta sintaxis.

Puedo ver que el %T de un array será [size]type,y sacar su longitud con len(array).Su longitud será su longitud máxima posible:
The type of the array is: [5]string
The type of the first element is: string
The size of the array is: 5

Si por ejemplo trato de asignar un elemento fuera de las medidas del arreglo Go no me va a dejar ejecutar el script,ya me va a avisar en tiempo de compilación del error:
bookings[52]="dsfsdf";
index 52 (constant of type int) is out of bounds

Sin embargo,puedo ver que los arrays en Go tienen una longitud estática,pero yo no siempre voy a saber ese número.
Ni siquiera sabré si lo voy a llenar,ni lo que va a almacenar en total...entonces¿que pasa si necesito una lista que sea dinámica en tamaño?

Go tiene los 'slices',que lo que hacen es expandirse automáticamente cuando nuevas posiciones son insertadas.

							SLICES

Un slice básicamente es una abstracción del tipo Array ya visto(lo usa por detrás).Sin embargo son mucho más flexibles,su longitud es variable y se pueden 'trozear'.obteniendo subpartes del mismo(sub-array).
Un slice se redimensionará(expandirá) cuando sea necesario

Para usar un slice simplemente no le defino el size:
var bookings []string;
Y para añadir usaré el método append(sliceName,value).Append agrega al final del elemento(como el push de Js).Si es necesario expande el slice.Fijate que necesita saber el nombre del slice
append(bookings,firstName)

Puedo ver que la longitud cambia si uso len(array | slice):
The type of the array is: [50]string
The type of the slice is: []string
The size of the array is: 50
The size of the slice is: 1
Adicionalmente,puedo usar la misma sintaxis larga que con los arrays.
var slice = []string{}

						LOOPS IN GO

Actualmente tenemos una app que tiene una entrada de datos,los recibe,los imprime y termina.Vamos a cambiar esto con un bucle.
Un loop statement permite ejecutar código múltiples veces.

En Go los bucles han sido simplificados,sólo hay uno(el for).No existen ni el while,ni el do-while...Genial.

INFINITE LOOP:
La sintaxis para  un bucle infinito es for {}.Cualquier cosa que ponga entre las llaves se repetirá indefinidamente:

for {
  ...logic
} 
Simplemente meto toda la lógica en el for {}

FOR EACH LOOP:
Vamos a  iterar sobre el slice(que es una lista) y devolver sólo el primer nombre.Para iterar usaré la keyword 'range' en un bucle for con esta sintaxis:

for index,element := range collection {}

Range itera sobre elementos de cualquier data structure(sobre cualquier cosa iterable,no solo arrays y slices).Si está iterando sobre un array o slice devolverá el indice y el propio elemento

firstNames := []string{} <- creo un slice
		
for index,booking := range bookings { <- recuerda me devuelve el index y el elem

Para separar un string vamos a usar el método Fields() que viene del paquete 'strings.Este paquete contiene funcionalidad para trabajar con strings:
for i,elem := range bookings{
  strings.Fields(elem)
}
NOTA:el método Fields separa un string usando el white space as separator:
"Nicole Smith" will become ["Nicole","Smith".
Fijate que devuelve un slice

NOTA:al importar más de un paquete hay que cambiar la sintaxis y usar import() y cada paquete además en una linea:

import (
	"fmt"
	"strings"
)
IMPORTANTE:recuerda que GO no va a dejar compilar correctamente si dejo una variable sin usar.Y no vamos a usar el index.Para ignorar una variable usaré el llamado Bland Identifier(_).
  
 for _,booking := range bookingsSlice { <- blank identifier
	firstNames = append(firstNames,strings.Split(booking," ")[0])
  }

				1H 24M IF -ELSE STATEMENT AND BOOLEANS

Realmente la aplicación debería terminar cuando la reserva de tickets llegue a 0.Habrá que preguntar tras cada reserva si remainingTickets == 0.
La sintaxis es igual que siempre:
if (boolean Expression){
   logic
}

Asi que quedará asi:
if (remainingTickets == 0) {
  fmt.Println("Sorry, we are sold out. Try again later.")
  break;
}
Fijate en el uso de break que termina el for loop y sigue con el bloque siguiente(a diferencia de return que termina todo).En nuestro caso no tenemos ese bloque.

También podemos declarar una variable booleana con el tipo bool:
var noTicketsRemaining bool = remainingTickets == 0;
O su forma "syntactic sugar":
noTicketsRemaining := remainingTickets == 0;		

Asi pues imprimiriamos si:
if(noTicketsRemaining){ ...}

Bien,y si un usuario quiere reservar más tickets de los que quedan lo mismo:
  fmt.Println("enter number of tickets to purchase: ");
  fmt.Scan(&userTickets);

	if (uint8(userTickets) > remainingTickets) {
	fmt.Printf("Sorry, we don't have enough tickets to complete your booking. Only %v tickets are available.\n", remainingTickets)
	fmt.Println("Please try again")
	continue;
}
Sin embargo,no queremos hacer un break y que salga del loop,un continue para que salte simplemente la iteración actual es suficiente.
Lógicamente sería mejor usar if/else y menos continue/break.

Como siempre puedo usar también if/else if/else(usando cuantos else if quiera):
		if (uint8(userTickets) > remainingTickets) {
			fmt.Printf("Sorry, we don't have enough tickets to complete your booking. Only %v tickets are available.\n", remainingTickets)
			fmt.Println("Please try again")
			continue;
		} else if (uint8(userTickets) == 0) {
			fmt.Println("You have to book at least one ticket")
			continue;
		}

			FOR LOOP BASED ON CONDITION

Puedo ejecutar cualquier bucle basandome en una expresión lógica:
for remainingTickets > 0 && len(bookings) < 50 { ...}
Incluso pueden ser varios boleanos(aunque con uno de ellos valdría,pues hacen lo mismo).
Esto es justo lo que estabamos haciendo con for {} ya que realmente es esto:
for true { ...} Claro que puedo obviar el true simplemente.Recuerda que puedo usar parentesis para incrementar la legibilidad:
for (true) {}

						1H 40M USER INPUT VALIDATION

Como desarrolladores debemos asegurarnos que la aplicación no cae cuando un usuario introduzca mal un dato.La aplicación debe ser robusta.

La función len() devuelve el numero de caracteres para los strings y el numero de elementos para los arrays y slices.

isValidName := len(firstName) >= 2 && len(lastname) >=2;

El método strings.Contains(string,substring):bool devuelve true o false según el substring dado en el segundo argumento exista en el string pasado en el primer argumento.

isValidEmail := strings.Contains(email,"@") && strings.Contains(email,".");

Como cualquier otro lenguaje puedo usar &&, || o ! para negar:
isValidCity := city != "singapore" || city != "new york" || city == "paris"
if (!isValidCity)...

Los if-else son super-importantes en programación ya que controlan el flujo de la aplicación.En GO hay un statement muy importante también que es el switch.

						SWITCH/CASE STATEMENT

Imagina que la aplicación puede estar en 6 ciudades diferentes y en base a cada ciudad ejecutará un código diferente:

	city := "London"

	switch city {
		case "New York":
			fmt.Println("Welcome to New York")
		case "Paris","London":
			fmt.Println("Welcome to Europe")
		case "Singapore":
			fmt.Println("Welcome to Singapore")
		default:
			fmt.Println("Welcome to the city of your dreams")
	}

Puedo agrupar valores en cada case separados por comas.

						FUNCTIONS IN GO

Nuestro código empieza a estar muy poblado.Mediante funciones puedo encapsular código en su propio contenedor(la propia función).
Cada función debería tener un nombre para poder llamarla,y además debe ser descriptivo.
Recuerda que en GO debe haber mínimo la funcion main,que arranca el programa.

Para declarar una funcion en Go se usa la palabra reservada 'func':

func greetUsers(){
	...code	
}

Lógicamente una función debe poder recibir parámetros.En GO hay que indicar el tipo ya que estoy en un lenguaje de tipado estático:

func greetUsers(confName string){
	fmt.Println("Welcome to our conference")	
}
IMPORTANTE:fijate que en el background de una funcion lo que sucede es esto:

func xxx(arg1 string,arg2 string,arg3 int){
  var arg1 string;
  var arg2 string;
  var arg3 int;
Es decir que lo primero que hace una función que recibe argumentos es crearlos.Sin embargo es algo que sucede transparente para el programador.

func greetUsers(confName string){
	fmt.Printf("Welcome to %v booking conference\n", confName);	
}
Ya puedo usarla con ese argumento:
greetUsers(conferenceName);

IMPORTANTE: En Go una función puede devolver datos como resultado.Es decir que una función puede tomar datos en la entrada(argumentos) y devolverl otros en el return.

En Go tengo que definir el tipo de ambos parámetros,tanto los de entrada como los de salida.Esto se hace con la siguiente sintaxis func nam(args)[]string {}(es como en TS pero sin el :boolean):

func getFirstNames(bookingsSlice []string)[]string {

Dado que ahora retorna algo puedo acumularlo en una variable:
firstNames := getFirstNames(bookingsSlice);
fmt.Printf("These are all the firstnames of the bookings we have made so far: %v\n", firstNames)

En GO una función puede devolver múltiples valores.Esto es diferente a la mayoria de lenguajes.De nuevo hay que especificar el tipo de datos de cada cosa que devuelva.

Adicionalmente,hay que englobar al grupo de retorno en unos paréntesis.

func validateUserInput(firstName string, lastname string, email string, userTickets int,remainingTickets int)(bool,bool,bool,bool) {
	isValidName := len(firstName) >= 2 && len(lastname) >= 2
	isValidEmail := strings.Contains(email, "@") && strings.Contains(email, ".")
	isValidTickets := userTickets > 0
	stillRemaining := (userTickets) <= remainingTickets
		
	return isValidName,isValidEmail,isValidTickets,stillRemaining
}

/* validate user input */
isValidName, isValidEmail, isValidTickets, stillRemaining := validateUserInput(firstName, lastname, email, userTickets, int(remainingTickets))

				PACKAGE LEVEL VARIABLES

Son variables definidas arriba del archivo(tras los imports) y afuera de todas las funciones.
Una variable definida a nivel de paquete es accesable por cualquier función,tanto en ese archivo como en otro con el mismo paquete:
package main;
import (
  "fmt"
  "strings"
)

var conferenceName = "Go Conference"; <- esto es una variable a nivel de paquete,accesible por el package main(importante,no admiten la declaración "syntactic sugar"

Sin embargo,recuerda que debo definir las variables en el ámbito más 'local' posible.

package main;

import (
	"fmt"
	"strings"
)
/* package level variables - no syntactic sugar */
var conferenceName = "Go Conference"
const conferenceTickets uint8 = 50
var remainingTickets uint8 = conferenceTickets

						PACKAGES IN GO

Until now we worked only with 1 file.Recuerda que un programa en Go es organizado en paquetes.
Un paquete es una colección de archivos Go.
Ya tenemos un paquete main que tuvimos que crear.						Until now we worked only with 1 file.Recuerda que un programa en Go es organizado en paquetes.
Un paquete es una colección de archivos Go.
Ya tenemos un paquete main que tuvimos que crear.						 

Podría darse el caso que tuviera varios archivos y que en todos ellos necesitará la lógica para el input de datos del user.
Puedo perfectamente crear un archivo helper.go que pertenecerá al mismo paquete:

package main

import (
	"strings"
)

func validateUserInput(firstName string, lastname string, email string, userTickets int, remainingTickets int) (bool, bool, bool, bool) {
	isValidName := len(firstName) >= 2 && len(lastname) >= 2

	isValidEmail := strings.Contains(email, "@") && strings.Contains(email, ".")

	isValidTickets := userTickets > 0

	stillRemaining := (userTickets) <= remainingTickets

	return isValidName, isValidEmail, isValidTickets, stillRemaining
}

Ahora tendré que arrancar la aplicación de forma diferente:
go run main.go helper.go
Obviamente no es muy eficaz ir de archivo en archivo asi que puedo referenciar un folder también:
go run . <- el dot es el current folder

							MÚLTIPLES PACKAGES

Sin embargo,es muy común tener varios paquetes en una aplicación.

Usar varios paquetes ayuda a organizar la aplicación y agrupar lógicamente mi código.
Se recomienda crear un folder por cada paquete(main/main.go y helper/helper.go tal como tengo ahora la app).

En cuanto haga esto Go ya no sabrá de donde viene la función del helper.go:
undeclared name: validateUserInput
Anteriormente lo sabía porque estaban en el mismo paquete

Para poder tener visión sobre el contenido de un paquete tengo que importar implícitamente ese paquete(esto aplica tanto a built-in packages como a mis custom packages):

import ( 
  "fmt"
  "strings"
  "booking-app/helper" 
)

Sin embargo no bastará con poner "helper" pues Go buscaría en las librerias del lenguaje.Para poder referenciar el path tendré que usar el name que le dí al módulo en el go.mod
module booking-app <- esto es = import path para TODOS los pkg de mi app

Ahora para usarla tendré que usar el nombre del paquete junto con la función,igual que usaba fmt.Printf():

helper.validateUserInput() <- sin embargo aún da otro fallo:
validateUserInput not exported by package helpercompiler
Cuando cree una función que va a usarse fuera de ese paquete tengo que exportarlaexpliciamente.Obviamente no estoy exportando esa función.

IMPORTANTE: en Go la forma de exportar una función es capitalizar el nombre de la función.Esto es otra mejora en comparación con la mayoria del resto de lenguajes.
Dado que he cambiado el nombre ahora la llamaré así:
 helper.ValidateUserInput()

NOTA:ya debería haberme dado cuenta de esto,pues todas las funciones estaban capitalizadas( fmt.Println, fmt.Printf, strings.Contain strings.Split ...).Sin embargo,soy muy asinto aún.

IMPORTANTE: también puedo exportar variables,constantes,types y functions también simplemente Capitalizando el nombre.

						SCOPE RULES

Hay tres niveles de scope(local,package y global):

local :ámbito local a la función.Solo puede usarse en esa función
func printName( names []string) [] string{
  names := []string{}; 
Las variables declaradas en bucles for,if/else son de scope local también.

package: declaradas fuera de cualquier función.Son accesibles en cualquier lugar de ese paquete:
var age=30
func ...

global: declaradas tanto fuera de cualquier función como capitalizadas.Pueden usarse en cualquier lugar y paquete(aunque habrá que importar el paquete origen)
const Tickets = 50

import ... <- para poder usarla

					DATA STRUCTURES - MAP

Queremos guardar los datos de una forma más organizada.Algo así:
firstName: "Nana"
lastName:"Janashia"
email:"nn@nn.com"
tickets:3
Un tipo de dato que va a permitir almacenar múltiples pares de clave-valor es el Map.Los Maps usarán unique keys,ya que es la forma de recuperar la data,mediante esa únique key(con lo que lo de arriba necesitaría ser pasado como valor).

Para crear un map se usa la keyword map[keyType]valueType.Ejemplo:
var userData = map[string]string 
Al estar en un lenguaje tipado todas las keys tendrán el mismo tipo

Fijate la diferencia entre un slice y un map:

var myslice = []string{}
Para crear un mapa antes se podia con {},pero ya es con la función make:
var user = make(map[string]string);

Para agregar pares de clave-valor se usa la sintaxis map[key]=value.Ejemplo:
userData["fistName"]= firstName
Con todo esto ya puedo crear un map:
	user["firstName"] = firstName;
	user["lastName"] = lastname;
	user["email"] = email;
	user["userTickets"] = strconv.Itoa(int(userTickets));

En Go tengo el paquete strconv(el package strconv implementa conversiones desde y hacia strings):
Los métodos más comunes son Atoi(string to int) y Itoa(integer to string):
s := strconv.Itoa(-42)
i := strconv.Atoi("34")
También está ParseBool,ParseFloat,ParseInt y ParseUint o FormatInt,FormatUint:

user["userTickets"] = strconv.FormatInt((int64(userTickets)), 10); Fijate que debo decir que es en base decimal y que siempre van a necesitar pasarse a 64bytes con int64,uint64,etc...
NOTA:16 representaría hexadecimal,ya que hexadecimal usa 16 caracteres y no 10 como usan los números.

Dado que lo que quiero es una coleccion de usuarios tengo que crear un slice de maps:
var bookingsMap = make([]map[string]string,0)

						DATA TYPES - STRUCTS

Bien,pero que pasa si quiero coleccionar diferentes tipos de datos,como esto?:
birthdate: Date <-01.02.1990
newsletter: bool <- true
attendanceNames: []string <- ["Mike","Sara"]

Obviamente no puedo hacerlo con un map(make(map[string]string),pues sólo soporta un tipo de datos.
Para ello puedo usar el tipo de datos Struct(que viene de estructura).
Me permite almacenar tipos de datos mixtos

Para crear una struct se usa la sintaxis:

type <StructName> struct {
  firstName string
  lastName string
  email string
  isActive bool
  numberOfTickets uint
}
* La keyword 'type' crea un nuevo tipo,con el nombre que le dé.Puedo traducir esto(type UserData struct {}) por: crea un tipo UserData basado en la struct {...}
Incluso puedo crear cualquier otro tipo de dato basado en otro data type como int,string,etc

la ventaja de una struct es que además me da el tipado con lo que un UserData tendrá que tener ciertas propiedades concretas:

type UserData struct  {
	firstName string
	lastname string
	email string
	numberOfTickets uint
} 
Es como una clase ligera,ya que no soporta herencia.Para asignarla valores se crea una instancia asi: UserData {}.Ejemplo:

var userData = UserData {
 	firstName: firstName,
	lastname: lastname,
	email: email,
	numberOfTickets: uint(userTickets),		
}

					SIMULATING A LONG PROCCESS TASK

NOTA:para guardar el retorno de fmt.Print,dado que este método sólo lo imprime por consola,tengo que usar fmt.Sprint y sus variantes:
var ticket =  fmt.Sprintf("%v tickets for %v %v\n",userTickets, firstName, lastName,)
Y para parar el proceso principal puedo usar el paquete time y su método Global Sleep:
	time.Sleep(time.Second * 2)
* La functin sleep para o bloquea el current thread (goroutine) durante el tiempoo establecido por argumento.

						GO-CONCURRENCY AND THREADS

Recordemos que una de las mayores ventajas de Go es su simplicidad al tratar con concurrencia.Nuestra aplicación corre en un mismo thread hasta ahora,asi que ese time.sleep lo va a bloquear.

Si uso más threads Go mandará ese sendTicket con el delay a otro hilo,siguiendo con el proceso principal.Cuando ese hilo termine ejecutará su código(igual que async/await)

Para crear un thread se usa la keyword 'go':
go sendTicket(uint8(userTickets), firstName, lastname, email)
Dado que sé que es un método asíncrono lo mando a otro hilo(go empieza una goroutine).Una goroutine es un lightweight thread managed by the Go runtime.
Básicamente es un hilo temporal manejado por el interprete.

Cuando esa goroutine termine volverá al hilo principal:

Enter your city(New York | Paris | London | Singapore
London
Welcome to Europe
Enter your first name:
############### <- viene de la goroutine
Sending ticket:
30 tickets for Paris ina
 to email address pa@s.c
###############

Puedo ver que es lo mismo que el eventLoop de Node.
NOTA:por defecto,la main goroutine no espera  por otras goroutines.Esto es importante,ya que nuestro código funcionó bien sólo porque está en un bucle infinito for.
Si quitará el bucle for y ejecutara la app y metiera un usuario la app terminarjia alli,ya que terminó el hilo principal.Puedo forzar al hilo principal a que espere a esa goroutine.

Para esto tengo que crear un WaitGroup.Esto vendrá del paquete sync,que provee funcionalidad para sincronización de hilos.
var wg = sync.WaitGroup {}

Ahora puedo acceder a los métodos wg.Add(increaseNumberGoroutines),con Add incremento el número de gorutinas en ese argumento int:

wg.Add(1)
go sendTicket(arg1,arg2,...)
wg.Wait() <- bloquea el hilo hasta que el numero de WaitGroups sea 0.

Y con Done decremento el numero de goroutines en la cantidad que indique.Dado que quiero esperar a que la función ejecute todo su código va a ir al final de la función:
func sendTicket(userTickets uint8, firstName string, lastName string, email string) {
	time.Sleep(time.Second * 10)
	var ticket = fmt.Sprintf("%v tickets for %v %v\n", userTickets, firstName, lastName)
	fmt.Println("###############")
	fmt.Printf("Sending ticket:\n%v to email address %v\n", ticket, email)
	fmt.Println("###############")
	wg.Done() <- siempre decrementa en 1??
}
Desde luego puedo observar que Go tiene varias ventajas.Crear un hilo usa menos código que por ejemplo Java además de ser más sencillo.
Adicionalmente crear un Thread es muy pesado y consume más hardware que crear una Goroutine(que es un Thread ligero optimizado)
Esto es asi porque Go lo que usa es algo similar a un Thread,pero no es un thread.Son goroutines de alto nivel manejadas por el interprete a diferencia de un Thread que es manejado por el SO y es mucho más costoso.
Son más rápidas de crear,más ligeras,consumen menos memoria...
Puedo ejecutar cientos de miles o incluso millones de gorutinas sin afectar el performance de la app

No sólo esto,sino que los lenguajes que usan Threads del SO tienen más complicado recibir y enviar datos entre ellos.
En GO existe el concepto de channel o canal que hace que compartir data entre hilos o gorutinas sea muy simple





